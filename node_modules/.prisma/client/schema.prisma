generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  passwordHash String
  role         UserRole     @default(USER)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  submissions  Submission[]
}

model Quiz {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  submissions Submission[]
}

model Question {
  id               Int                @id @default(autoincrement())
  quiz             Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId           Int
  text             String
  order            Int
  options          Option[]
  createdAt        DateTime           @default(now())
  SubmissionAnswer SubmissionAnswer[]

  @@unique([quizId, order])
}

model Option {
  id               Int                @id @default(autoincrement())
  question         Question           @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       Int
  text             String
  isCorrect        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  SubmissionAnswer SubmissionAnswer[]
}

model Submission {
  id         Int                @id @default(autoincrement())
  quiz       Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId     Int
  user       User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     Int?
  userName   String
  userEmail  String?
  score      Int
  total      Int
  percentage Float
  createdAt  DateTime           @default(now())
  answers    SubmissionAnswer[]

  @@unique([quizId, userEmail])
}

model SubmissionAnswer {
  id           Int        @id @default(autoincrement())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId Int
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   Int
  option       Option     @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId     Int
  isCorrect    Boolean

  @@unique([submissionId, questionId])
}
